!function(e,n){if(n.offline=function(){return{then:function(){}}},"serviceWorker"in e.navigator&&n[6]&&n[6][0]){var o=e.document,r=n[6];if(r[3]){var t,i=function(){n[11](function(){if(t!==navigator.onLine&&o.body){if(navigator.onLine){if(void 0===t)return;console.info("Abtf.offline() ➤ connection restored"),o.body.classList.remove("offline")}else console.warn("Abtf.offline() ➤ connection offline"),o.body.classList.add("offline");t=!!navigator.onLine}})};e.addEventListener("online",i),e.addEventListener("offline",i),i()}var a=function(){navigator.serviceWorker.controller.postMessage([1,n[6][2],n[6][4],n[6][5]])};navigator.serviceWorker.ready.then(function(){navigator.serviceWorker.controller?a():navigator.serviceWorker.addEventListener("controllerchange",function(){a()}),console.info("Abtf.pwa() ➤ service worker ready")}),r[6]&&navigator.serviceWorker.register(r[0],{scope:r[1]}).then(function(e){return new Promise(function(n,o){e.installing?e.installing.addEventListener("statechange",function(e){"installed"==e.target.state?(console.info("Abtf.pwa() ➤ service worker loaded"),n()):(console.warn("Abtf.pwa() ➤ service worker",e.target.state),"redundant"==e.target.state&&o())}):(console.info("Abtf.pwa() ➤ service worker loaded"),n())})}).catch(function(e){throw e}),navigator.serviceWorker.addEventListener("message",function(e){if(e&&e.data&&e.data instanceof Array&&2===e.data[0]){if(!o.body)return;var e=new CustomEvent("sw-update",{detail:{url:e.data[1]}});o.body.dispatchEvent(e)}});var s=function(e,n){if(navigator.serviceWorker.controller){var o=new MessageChannel;o.port1.onmessage=function(e){e.data&&e.data.error?console.info("Abtf.offline() ➤ error",e.data.error):n(e.data.status)},navigator.serviceWorker.controller.postMessage([2,e],[o.port2])}else navigator.serviceWorker.ready.then(function(){s(e,n)})};n.offline=function(e){return new Promise(function(n){s(e,n)}).catch(function(n){console.info("Abtf.offline() ➤ error",n,e)})}}}(window,window.Abtf);